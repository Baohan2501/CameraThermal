//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Export.CameraService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CameraService.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ConnectDevice", ReplyAction="http://tempuri.org/IService/ConnectDeviceResponse")]
        bool ConnectDevice(string ipAddress, string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ConnectDevice", ReplyAction="http://tempuri.org/IService/ConnectDeviceResponse")]
        System.Threading.Tasks.Task<bool> ConnectDeviceAsync(string ipAddress, string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataLive", ReplyAction="http://tempuri.org/IService/GetDataLiveResponse")]
        Core.Model.TemperatureResponse GetDataLive(int cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataLive", ReplyAction="http://tempuri.org/IService/GetDataLiveResponse")]
        System.Threading.Tasks.Task<Core.Model.TemperatureResponse> GetDataLiveAsync(int cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        Core.Model.TemperatureInfo[] GetData(string cameraId, System.DateTime startDate, System.DateTime endDate, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        System.Threading.Tasks.Task<Core.Model.TemperatureInfo[]> GetDataAsync(string cameraId, System.DateTime startDate, System.DateTime endDate, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSiteCameras", ReplyAction="http://tempuri.org/IService/GetSiteCamerasResponse")]
        string GetSiteCameras();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSiteCameras", ReplyAction="http://tempuri.org/IService/GetSiteCamerasResponse")]
        System.Threading.Tasks.Task<string> GetSiteCamerasAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSqlConnection", ReplyAction="http://tempuri.org/IService/GetSqlConnectionResponse")]
        string GetSqlConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSqlConnection", ReplyAction="http://tempuri.org/IService/GetSqlConnectionResponse")]
        System.Threading.Tasks.Task<string> GetSqlConnectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Stop", ReplyAction="http://tempuri.org/IService/StopResponse")]
        void Stop();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Stop", ReplyAction="http://tempuri.org/IService/StopResponse")]
        System.Threading.Tasks.Task StopAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Start", ReplyAction="http://tempuri.org/IService/StartResponse")]
        void Start(Core.Model.SiteCamera[] siteCameras, string connectionSql, int interval);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Start", ReplyAction="http://tempuri.org/IService/StartResponse")]
        System.Threading.Tasks.Task StartAsync(Core.Model.SiteCamera[] siteCameras, string connectionSql, int interval);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Export.CameraService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Export.CameraService.IService>, Export.CameraService.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool ConnectDevice(string ipAddress, string user, string password) {
            return base.Channel.ConnectDevice(ipAddress, user, password);
        }
        
        public System.Threading.Tasks.Task<bool> ConnectDeviceAsync(string ipAddress, string user, string password) {
            return base.Channel.ConnectDeviceAsync(ipAddress, user, password);
        }
        
        public Core.Model.TemperatureResponse GetDataLive(int cameraId) {
            return base.Channel.GetDataLive(cameraId);
        }
        
        public System.Threading.Tasks.Task<Core.Model.TemperatureResponse> GetDataLiveAsync(int cameraId) {
            return base.Channel.GetDataLiveAsync(cameraId);
        }
        
        public Core.Model.TemperatureInfo[] GetData(string cameraId, System.DateTime startDate, System.DateTime endDate, int type) {
            return base.Channel.GetData(cameraId, startDate, endDate, type);
        }
        
        public System.Threading.Tasks.Task<Core.Model.TemperatureInfo[]> GetDataAsync(string cameraId, System.DateTime startDate, System.DateTime endDate, int type) {
            return base.Channel.GetDataAsync(cameraId, startDate, endDate, type);
        }
        
        public string GetSiteCameras() {
            return base.Channel.GetSiteCameras();
        }
        
        public System.Threading.Tasks.Task<string> GetSiteCamerasAsync() {
            return base.Channel.GetSiteCamerasAsync();
        }
        
        public string GetSqlConnection() {
            return base.Channel.GetSqlConnection();
        }
        
        public System.Threading.Tasks.Task<string> GetSqlConnectionAsync() {
            return base.Channel.GetSqlConnectionAsync();
        }
        
        public void Stop() {
            base.Channel.Stop();
        }
        
        public System.Threading.Tasks.Task StopAsync() {
            return base.Channel.StopAsync();
        }
        
        public void Start(Core.Model.SiteCamera[] siteCameras, string connectionSql, int interval) {
            base.Channel.Start(siteCameras, connectionSql, interval);
        }
        
        public System.Threading.Tasks.Task StartAsync(Core.Model.SiteCamera[] siteCameras, string connectionSql, int interval) {
            return base.Channel.StartAsync(siteCameras, connectionSql, interval);
        }
    }
}
